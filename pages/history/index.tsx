import prisma from '../../prisma'
import type { NextPage } from 'next'
import {useRouter} from 'next/router'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../../styles/Home.module.scss'
import fnt from '../../styles/Fonts.module.scss'
import supabase from '../../supabaseLib'
import { bugType } from '../../type'
import { DeleteButton, ModifyButton, ViewButton } from '../../components/actionButtons'
import Nav from '../../components/nav'

const History: NextPage = ({bugsList, currUserPrivileges, user}:any) => {
  const [bugs,setBugs] = useState<bugType[]>()
  
  useEffect(() => {
    setBugs(JSON.parse(bugsList))
  },[])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/bug.ico" />
      </Head>

       <main className={styles.main}>
        <Nav page="Bug History Log" user={user.user_metadata}/>
        <table className="dark:text-white w-full">
          {/* Headers */}
          <tr className="border-b-4 border-black dark:border-white">
            <th className={`${fnt.title__font} hidden mx-1 px-2 `}>Created</th>
            <th className={`${fnt.title__font} hidden mx-1 px-2 `}>Author ID</th>
            <th className={`${fnt.title__font} mx-1 px-2 `}>Title</th>
            <th className={`${fnt.title__font} hidden mx-1 px-2 `}>Description</th>
            <th className={`${fnt.title__font} mx-1 px-2 `}>Resolved</th>
            <th className={`${fnt.title__font} mx-1 px-2 `}>Priority</th>
            <th className={`${fnt.title__font} mx-1 px-2 `}>More Action</th>
          </tr>
          {/* Body */}
          {
            bugs?.map(bug=>{
              return(
                <>
                  <tr key={bug.id} className={`${(bug?.priorityStatus === 'high') ? 'bg-red-200/40 dark:bg-red-600/20' : (bug?.priorityStatus === 'medium') ?'bg-orange-200/40 dark:bg-orange-600/20' : 'bg-emerald-200/40 dark:bg-emerald-600/20'} my-3 border-b-2 border-black/20 dark:border-white/40`}>
                    <td className={`${fnt.text__font} px-2 hidden`}>{bug?.createdAt!.substring(0,10)}</td>
                    <td className={`${fnt.text__font} px-2 hidden`}>{bug?.author}</td>
                    <td className={`${fnt.text__font} px-2 `}>{bug?.title}</td>
                    <td className={`${fnt.text__font} px-2 hidden`}>{bug?.description}</td>
                    <td className={`${fnt.text__font} px-2 `}>{bug?.isResolved ? 'Yes' : 'No'}</td>
                    <td className={`${fnt.text__font} px-2 `}>{bug?.priorityStatus}</td>
                    <td className="scale-75 flex flex-col justify-center items-center">
                      <ViewButton   bugId={bug.id}/>
                      <ModifyButton bugId={bug.id} isPrivilege={currUserPrivileges.allowedToDeleteBugReport}/>
                      <DeleteButton bugId={bug.id} isPrivilege={currUserPrivileges.allowedToDeleteBugReport}/>
                    </td>
                  </tr>
                </>
              )
            })
          }
        </table>

      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default History

export async function getServerSideProps({ req }:any) {
  const { user } = await supabase.auth.api.getUserByCookie(req)
  if (!user) {
    // If no user, redirect to index.
    return { props: {}, redirect: { destination: '/', permanent: false } }
  }
  // The JSON is stringify because of NextJS restriction on passing JSON DateTime
  const bugsList = JSON.stringify(await prisma.current_bug.findMany()) 

  const currUserPrivileges = await prisma.user.findUnique({
    where:{
      id: user.id
    },
    select:{
      allowedToModifyBugReport: true,
      allowedToDeleteBugReport: true
    }
  })
  
  return{
    props:{ bugsList, currUserPrivileges, user }
  }
}